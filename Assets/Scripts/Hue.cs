//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/Hue.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Hue: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Hue()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Hue"",
    ""maps"": [
        {
            ""name"": ""HueMaps"",
            ""id"": ""24119834-c954-4d19-89d1-e5e3c99d0766"",
            ""actions"": [
                {
                    ""name"": ""Red"",
                    ""type"": ""Button"",
                    ""id"": ""66f6507f-6958-4c9a-a714-faf9b34e22ba"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Green"",
                    ""type"": ""Button"",
                    ""id"": ""7ef76716-65ec-4a87-9a09-0e67546fe97a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Blue"",
                    ""type"": ""Button"",
                    ""id"": ""dae81271-e118-407d-9e5d-7e41bebe2ced"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""96108f56-d51f-4c46-8a13-660bca6ded58"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Red"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9457f869-cac6-47ff-a282-819595110a45"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Green"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b70340a3-09ec-494e-be3a-71bcedebd96e"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Blue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // HueMaps
        m_HueMaps = asset.FindActionMap("HueMaps", throwIfNotFound: true);
        m_HueMaps_Red = m_HueMaps.FindAction("Red", throwIfNotFound: true);
        m_HueMaps_Green = m_HueMaps.FindAction("Green", throwIfNotFound: true);
        m_HueMaps_Blue = m_HueMaps.FindAction("Blue", throwIfNotFound: true);
    }

    ~@Hue()
    {
        UnityEngine.Debug.Assert(!m_HueMaps.enabled, "This will cause a leak and performance issues, Hue.HueMaps.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // HueMaps
    private readonly InputActionMap m_HueMaps;
    private List<IHueMapsActions> m_HueMapsActionsCallbackInterfaces = new List<IHueMapsActions>();
    private readonly InputAction m_HueMaps_Red;
    private readonly InputAction m_HueMaps_Green;
    private readonly InputAction m_HueMaps_Blue;
    public struct HueMapsActions
    {
        private @Hue m_Wrapper;
        public HueMapsActions(@Hue wrapper) { m_Wrapper = wrapper; }
        public InputAction @Red => m_Wrapper.m_HueMaps_Red;
        public InputAction @Green => m_Wrapper.m_HueMaps_Green;
        public InputAction @Blue => m_Wrapper.m_HueMaps_Blue;
        public InputActionMap Get() { return m_Wrapper.m_HueMaps; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HueMapsActions set) { return set.Get(); }
        public void AddCallbacks(IHueMapsActions instance)
        {
            if (instance == null || m_Wrapper.m_HueMapsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HueMapsActionsCallbackInterfaces.Add(instance);
            @Red.started += instance.OnRed;
            @Red.performed += instance.OnRed;
            @Red.canceled += instance.OnRed;
            @Green.started += instance.OnGreen;
            @Green.performed += instance.OnGreen;
            @Green.canceled += instance.OnGreen;
            @Blue.started += instance.OnBlue;
            @Blue.performed += instance.OnBlue;
            @Blue.canceled += instance.OnBlue;
        }

        private void UnregisterCallbacks(IHueMapsActions instance)
        {
            @Red.started -= instance.OnRed;
            @Red.performed -= instance.OnRed;
            @Red.canceled -= instance.OnRed;
            @Green.started -= instance.OnGreen;
            @Green.performed -= instance.OnGreen;
            @Green.canceled -= instance.OnGreen;
            @Blue.started -= instance.OnBlue;
            @Blue.performed -= instance.OnBlue;
            @Blue.canceled -= instance.OnBlue;
        }

        public void RemoveCallbacks(IHueMapsActions instance)
        {
            if (m_Wrapper.m_HueMapsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHueMapsActions instance)
        {
            foreach (var item in m_Wrapper.m_HueMapsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HueMapsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HueMapsActions @HueMaps => new HueMapsActions(this);
    public interface IHueMapsActions
    {
        void OnRed(InputAction.CallbackContext context);
        void OnGreen(InputAction.CallbackContext context);
        void OnBlue(InputAction.CallbackContext context);
    }
}
